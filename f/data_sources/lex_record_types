# ruff: noqa: E402 
from ast import parse
from typing import Optional
from pydantic import ValidationError
from f.main.boilerplate import url_obj, get_timed_logger
log = get_timed_logger(__file__, 'info')
from collections import defaultdict
import re
import json
from f.main.ATPTGrister import ATPTGrister, gf
from f.main.github_client import gh, get_repo_files
from atproto_lexicon.parser import lexicon_parse

nsid_regex = re.compile(r"^(?P<domain_authority>[a-zA-Z](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9]))+)\.(?P<name>(?:[a-zA-Z](?:[a-zA-Z0-9]{0,62})?)+)$")

github_url_regex = re.compile( #TIL about implicit string concatenation
    r'github\.com/'
    r'(?P<owner>[^/]+)/'
    r'(?P<repo>[^/]+)/'
    r'tree/'
    r'(?P<branch>[^/]+)/?'
    r'(?P<path>.*)'
)
github_template = "https://github.com/{0}/{1}/tree/{2}/{3}"

log.debug('finished imports')

unwanted_domains = [
    'chat.bsky'
]

wanted_lexicons = defaultdict(dict)

def check_lex_rec(raw_file: str)-> dict[str, str | None] | None:
    lex_json = json.loads(raw_file)
    try:
        parse_error = None
        lex = lexicon_parse(lex_json)
        #longterm add support for lexicon resolution to check for the latest version
        for lex_def in lex.defs.values():
            if lex_def.type == 'record':
                if nsid := nsid_regex.match(lex.id):
                    domain, name = nsid.groups()
                    log.debug(f'lexicon_parse got record for lex {name} of {domain} ')
                    return {'nsid': lex.id, 'error': parse_error}
                else:
                    log.error(f"found lex {lex.id} but it's not valid!")
    except ValidationError as e:
        parse_error = json.dumps(e.errors())
        log.error(e)

    # the validation code isn't completely correct so for now we do our own check i guess
    if lex_json['defs'].get('main', {}).get('type') == 'record':
        if nsid := nsid_regex.match(lex_json['id']):
            domain, name = nsid.groups()
            log.debug(f'got record for lex {name} of {domain} ')
            return {'nsid': lex_json['id'], 'error': parse_error}
        else:
            log.error(f"found lex {lex_json['id']} but it's not valid!")

lex_search_template = 'https://api.github.com/search/code?q=repo:{owner}/{repo} "\\"type\\": \\"record\\"" {repo_path} extension:json&per_page=100'
def find_rec_lexicons(url):
    if (
        not (repo_info := github_url_regex.search(url)) or
        not len(repo_info.groups()) == 3
    ):
        raise ValueError(f"url {url} does not match regex {github_url_regex}")
    owner, repo, repo_path = repo_info.groups()
    repo_path = 'path:' + '/'.join(repo_path) if repo_path else ''
    paths = []
    query = lex_search_template.format(owner, repo, repo_path)
    while query:
        log.debug(f'requesting url\n{lex_search_template}')
        r = gh.get(lex_search_template)
        data = r.json()
        paths += [item['path'] for item in data['items']]
        query = r.links.get('next', {}).get('url')
    ids = {
        lex_entry['nsid']: {'path': github_template.format(*repo_info, path), 'error': lex_entry['error']}
        for path, file in get_repo_files(url, paths).items()
        if (lex_entry := check_lex_rec(file))
    }
    return ids

def main():
    log.debug('starting main')
    g = ATPTGrister(False)
    #blocked this is a dirty hack because we have no way atm to tell current from outdated lexicons so we put the more 'authoritative' (bsky.app) repo first
    recs = g.list_records("Lexicons", sort='manualSort')[1]
    log.debug('fetched records')
    lexicons = {}
    for rec in recs:
        if rec.get("machine_readable") == "yes":
            url = rec.get("source")
            for nsid, entry in find_rec_lexicons(url).items():
                if nsid not in lexicons:
                    lexicons[nsid] = entry

    out = [
        {
            gf.KEY: {"nsid": nsid},
            gf.FIELDS: {**entry},
        }
        for nsid, entry in lexicons.items()
    ]
    g.add_update_records("Tags_lexicon_record_types", out)

    
if __name__ == "__main__":
    main()
